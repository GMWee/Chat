import aiogram
import aiohttp
import asyncio
import logging

from aiogram import F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.base.config import CONFIG
from src.routers import messages, settings, subscription, donate
from src.base.database import DATABASE


class Bot:
	def __init__(self):
		self.bot: aiogram.Bot = None
		self.dispatch = None
		self._shutdown_event = asyncio.Event()
	
	async def run(self):
		await DATABASE.open_connection(
			CONFIG["database_host"],
			CONFIG["database_port"],
			CONFIG["database_user"],
			CONFIG["database_password"],
			CONFIG["database_database"],
		)
		
		self.bot = aiogram.Bot(CONFIG["token"])
		self.dispatch = aiogram.Dispatcher()
		
		await self._set_commands()
		self._register_handlers()
		
		self.dispatch.include_router(donate.router)
		self.dispatch.include_router(subscription.router)
		self.dispatch.include_router(settings.router)
		self.dispatch.include_router(messages.router)
		
		async with aiohttp.ClientSession() as session:
			try:
				polling_task = asyncio.create_task(
					self.dispatch.start_polling(self.bot, skip_updates=True, aiohttp_session=session)
				)
				shutdown_task = asyncio.create_task(self._shutdown_event.wait())
				
				done, pending = await asyncio.wait(
					{polling_task, shutdown_task},
					return_when=asyncio.FIRST_COMPLETED
				)
				
				if shutdown_task in done:
					logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞")
					await self.dispatch.stop_polling()
				
				for task in pending:
					task.cancel()
					try:
						await task
					except asyncio.CancelledError:
						pass
			
			finally:
				await self.bot.session.close()
				await DATABASE.close_connection()
	
	async def _set_commands(self):
		commands = [
			aiogram.types.BotCommand(command="pay", description="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫"),
			aiogram.types.BotCommand(command="buy", description="–ü—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É"),
			aiogram.types.BotCommand(command="reset", description="–û—á–∏—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
			aiogram.types.BotCommand(command="system", description="–ó–∞–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç"),
			aiogram.types.BotCommand(command="clear", description="–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"),
			aiogram.types.BotCommand(command="command", description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
			aiogram.types.BotCommand(command="model", description="–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π"),
			aiogram.types.BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"),
			aiogram.types.BotCommand(command="temp", description="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"),
			aiogram.types.BotCommand(command="token", description="–ö–æ–ª-–≤–æ –≤—ã–≤–æ–¥–∏–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"),
		]
		
		await self.bot.set_my_commands(commands)
	
	def _register_handlers(self):
		
		@self.dispatch.message(Command('stop'))
		async def stop_bot_request(message: Message):
			user = await DATABASE.get_or_create_user(message.chat.id)
			
			if user[3] < 1:
				await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
				return
			
			builder = InlineKeyboardBuilder()
			builder.button(text="‚úÖ –î–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="confirm_stop")
			builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_stop")
			
			await message.answer(
				"‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞?*\n\n"
				"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–µ—Ä–≤–µ—Ç —Ä–∞–±–æ—Ç—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
				parse_mode="Markdown",
				reply_markup=builder.as_markup()
			)
		
		@self.dispatch.callback_query(F.data == "confirm_stop")
		async def confirm_stop(callback: CallbackQuery):
			user = await DATABASE.get_or_create_user(callback.message.chat.id)
			if user[3] < 1:
				await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
				return
			
			logging.info(f"–ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú {callback.from_user.id}")
			await callback.message.edit_text("üî¥ *–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n–í–∞—à ID –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞ –∏ –≤ –ª–æ–≥–∏", parse_mode="Markdown")
			await callback.answer()
			
			self._shutdown_event.set()
		
		@self.dispatch.callback_query(F.data == "cancel_stop")
		async def cancel_stop(callback: CallbackQuery):
			await callback.message.edit_text("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
			await callback.answer()