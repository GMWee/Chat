from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command

import time

from src.base.database import DATABASE
from src.base.utils import get_user_subscription

router = Router()


async def format_subscription_info(sub_info, sub_models):
    text = f"{sub_info[1]}\n\n"
    text += f"‚Äî <b>–¶–µ–Ω–∞:</b> {float(sub_info[5])}‚≠ê\n"
    text += f"‚Äî <b>–ö—Ä–µ–¥–∏—Ç—ã –≤ —á–∞—Å</b>:  {sub_info[2]}üíé\n"
    text += f"‚Äî <b>–§–æ—Ç–æ</b>: "
    if sub_info[3] == 0:
        text += f"–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
    else:
        text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å  {sub_info[3]}üíé_\n"
    text += f"‚Äî <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>: "
    if sub_info[-1] == 0:
        text += f"–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n"
    else:
        text += f"–°—Ç–æ–∏–º–æ—Å—Ç—å  {sub_info[7]}üíé_\n"
    text += f"‚Äî <b>–î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞</b>:  {sub_info[6]}üíé\n\n"
    text += f"ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"

    for mod in sub_models:
        model = await DATABASE.get_model(mod[0])
        text += f"‚Äî {model[1]}\n"

    return text


async def get_all_subscription_info():
    all_texts = []
    for i in range(5):
        sub_info = await DATABASE.get_subscription(i)
        if not sub_info:
            continue

        sub_models = await DATABASE.get_subscription_models(i)
        formatted_text = await format_subscription_info(sub_info, sub_models)
        all_texts.append(formatted_text)
    return all_texts


@router.message(Command('info'))
async def info(message: Message):
    user_id = message.chat.id
    user = await DATABASE.get_or_create_user(user_id)
    sub = get_user_subscription(user)

    if sub is None:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.", parse_mode="Markdown")
        return

    sub_info = await DATABASE.get_subscription(sub)
    sub_models = await DATABASE.get_subscription_models(sub)
    current_model = await DATABASE.get_model(user[4])
    cred = user[5]

    if time.time() > user[6]:
        cred = sub_info[2]
        await DATABASE.set_credits_info(user_id, cred, 0)

    text = "‚ùóÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
    text += f"‚Äî *–ë–∞–ª–∞–Ω—Å:* {float(user[11])}‚≠ê\n"
    text += f"‚Äî *–ü–æ–¥–ø–∏—Å–∫–∞*: {sub_info[1]}\n"
    text += f"‚Äî *–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å*: {current_model[1]}\n"
    text += f"‚Äî *–ö—Ä–µ–¥–∏—Ç—ã*: _{cred}üíé / {sub_info[2]}üíé_\n"
    if sub_info[4] == 0:
        text += "‚Äî *–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã*\n\n"
    else:
        text += f"‚Äî *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ñ–æ—Ç–æ*: _{sub_info[4]}üíé_\n\n"
    text += "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n"

    for mod in sub_models:
        model = await DATABASE.get_model(mod[0])
        text += f"‚Äî {model[1]}\n"

    await message.answer(text, parse_mode="Markdown")
    

@router.message(Command('buy'))
async def buy_command(message: Message):
    subscription_texts = await get_all_subscription_info()
    text = ''
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='üü§ BRONZE', callback_data='buy_1')],
            [InlineKeyboardButton(text='‚ö™Ô∏è SILVER', callback_data='buy_2')],
            [InlineKeyboardButton(text='üü° GOLD', callback_data='buy_3')],
            [InlineKeyboardButton(text='üî∑ PLATINUM', callback_data='buy_4')],
            [InlineKeyboardButton(text='‚ù§Ô∏è ADMIN', callback_data='buy_5')],
        ]
    )
    for sub_text in subscription_texts:
        text += sub_text
        text += "\n\n"
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    
@router.callback_query(F.data.startswith('buy_'))
async def buy_sub(callback: CallbackQuery):
    user_id = callback.from_user.id
    sub_id = int(callback.data[len("buy_"):])
    sub_info = await DATABASE.get_subscription(sub_id)
    user = await DATABASE.get_or_create_user(user_id)
    if user[11] < sub_info[5]:
        await callback.message.edit("‚ö†Ô∏è *–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –∫–æ—à–µ–ª—å–∫–µ!*\n\n"
			"–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—É—á—à–µ ‚Äî –ø—Ä–æ–ø–∏—à–∏—Ç–µ /pay –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", parse_mode="Markdown")
        return
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'yes_{sub_id}_{user_id}')]
            ]
        )
        await callback.message.edit_text(f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É - *{sub_info[1]}* –∑–∞ *{sub_info[5]}‚≠ê*\n\n*–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –Ω–∞–∂–º–µ—Ç–µ –∫–Ω–æ–ø–∫—É - –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, –¥–µ–Ω—å–≥–∏ —Å–ø–∏—à—É—Ç—Å—è —Å –≤–∞—à–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç!*", reply_markup=keyboard, parse_mode="Markdown")
        
        
@router.callback_query(F.data.startswith('yes_'))
async def buy_sub(callback: CallbackQuery):
    data = callback.data.split("_")
    sub_id = int(data[1])
    user_id = int(data[2])
    sub_info = await DATABASE.get_subscription(sub_id)
    user = await DATABASE.get_or_create_user(user_id)
    sum = user[11] - sub_info[5]
    datatime = (60 * 60 * 24 * 28) + time.time()
    await DATABASE.set_user_subscription(user_id, sub_id, datatime)
    await DATABASE.set_user_balance(sum, user_id)
    # –ó–¥–µ—Å—å –æ—à–∏–±–∫–∞ - –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ
    updated_user = await DATABASE.get_or_create_user(user_id)
    await callback.message.edit_text(
        f"–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {sub_info[1]}\n\n"
        f"–ë–∞–ª–∞–Ω—Å: {updated_user[11]}‚≠ê\n*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è‚úÖ*",
        parse_mode="Markdown"
    )