from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from decimal import Decimal, InvalidOperation

import datetime
import json
import logging
import aiohttp


from src.base.config import CONFIG
from src.base.database import DATABASE


YOOMONEY_API_URL = "https://yoomoney.ru/api/operation-history"

logger = logging.getLogger(__name__)
router = Router()

class SetState(StatesGroup):
    sum = State()

class sum:
	sum = 20

SUM = sum()

@router.message(Command("pay"))
async def cmd_system(message: Message, state: FSMContext):
    await message.answer("‚≠êÔ∏è*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–µ –º–µ–Ω–µ–µ 20 —Ä—É–±–ª–µ–π.\n(1‚≠êÔ∏è = 1‚ÇΩ):*", parse_mode="Markdown")
    await state.set_state(SetState.sum)

@router.message(SetState.sum)
async def set_system(message: Message, state: FSMContext):
    keyboard = []
    try:
        sum_value = float(message.text)
    except ValueError:
        await message.answer("*–û–®–ò–ë–ö–ê:*\n–í–≤–µ–¥–∏—Ç–µ *—á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ* —Å—É–º–º—ã‚ùóÔ∏è", parse_mode="Markdown")
        return

    if not isinstance(sum_value, (int, float)) or sum_value < 20:
        await message.answer("*–û–®–ò–ë–ö–ê:*\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É *–Ω–µ –º–µ–Ω–µ–µ 20‚ÇΩ*‚ùóÔ∏è", parse_mode="Markdown")
        return

    SUM.sum = sum_value

    keyboard.append([
        InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∞ –Ω–∞ {sum_value}‚ÇΩ", callback_data=f"sub_buy_{sum_value}"),
    ])

    await message.answer(
        "–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∞–º –¥–∞–¥—É—Ç *—Å—Å—ã–ª–∫—É* –Ω–∞ –æ–ø–ª–∞—Ç—É\n"
        f"–∏ *–≤—ã –ø–æ–ª—É—á–∏—Ç–µ {sum_value}‚≠êÔ∏è* –Ω–∞ –±–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="Markdown"
    )
    await state.clear()


async def get_label(sum, id, num):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://127.0.0.1/get_quickpay_link/{sum}/{id}/{CONFIG['api_key']}") as resp:
            data = await resp.json()
            return data.get("url") if num == 1 else data.get("label")


async def check_payment(label, user_id, num):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://127.0.0.1/check_payment_handler/{label}/{user_id}/{CONFIG['api_key']}") as resp:
            data = await resp.json()
            return data.get("label")


@router.callback_query(F.data.startswith("sub_buy_"))
async def sub_buy(callback: CallbackQuery):
    _sum = float(callback.data[len("sub_buy_"):])
    formatted_price_for_label = f"{Decimal(_sum):.2f}"
    text = (
        f"<b>‚≠ê{_sum}</b>\n"
        f"üí≤ <b>–¶–µ–Ω–∞:</b> <em>{formatted_price_for_label} —Ä—É–±</em>\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ <b>–û–ø–ª–∞—Ç–∏—Ç—å</b> (–≤—ã –ø–µ—Ä–µ–π–¥—ë—Ç–µ –Ω–∞ —Å–∞–π—Ç YooMoney)\n"
        "2Ô∏è‚É£ –ó–∞—Ç–µ–º <b>–Ø –æ–ø–ª–∞—Ç–∏–ª</b>"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ú® –û–ø–ª–∞—Ç–∏—Ç—å", url=await get_label(_sum, callback.from_user.id, 1))],
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"sub_check_{await get_label(_sum, callback.from_user.id, 0)}")]
    ])
    await callback.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data.startswith("sub_check_"))
async def check_payment_handler(callback: CallbackQuery):
	label: str = callback.data[len("sub_check_"):]
	user_id = callback.from_user.id

	await callback.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...")

	if await check_payment(label, user_id, 0) == 1:
		await sub_update(callback.message.chat.id, float(label.split("_")[-1]))

		await callback.message.answer(
			f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
			f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω<b>–°–ø–∞—Å–∏–±–æ</b>!",
			parse_mode="HTML"
		)
	else:
		await callback.message.answer(
			"‚ö†Ô∏è <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω</b>\n\n"
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É –≤ YooMoney\n"
			"–ü–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n\n"
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å <b>–Ø –æ–ø–ª–∞—Ç–∏–ª</b> –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç\n"
			"–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
			parse_mode="HTML"
		)

async def sub_update(sum: int, telegram_id: int):
	await DATABASE.set_user_balance(sum, telegram_id,)